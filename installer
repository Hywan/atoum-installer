#!/usr/bin/env php
<?php
define('INSTALLER_URL', 'https://raw.github.com/gist/3934569/installer');

define('ATOUM_PHAR_NAME', 'mageekguy.atoum.phar');

define('ATOUM_PHAR_URL', (($phar = getenv('ATOUM_PHAR_URL')) ? $phar : 'http://downloads.atoum.org/nightly/' . ATOUM_PHAR_NAME));
define('ATOUM_GIT_URL', (($url = getenv('ATOUM_GIT_URL')) ? $url : 'git://github.com/mageekguy/atoum.git'));
define('ATOUM_PATH', (($path = getenv('ATOUM_PATH')) ? $path : '/usr/share') . DIRECTORY_SEPARATOR . 'atoum');
define('ATOUM_SYMLINK', (($symlink = getenv('ATOUM_SYMLINK')) ? $symlink : '/usr/local/bin') . DIRECTORY_SEPARATOR . 'atoum');

if(false !== getenv('ATOUM_PATH') || false !== getenv('ATOUM_SYMLINK')) {
    $argv[] = '--global';
}

array_shift($argv);
exit(install($argv));

function install(array $args) {
    printfln('> <green>atoum installer');    
    printfln('> <blue>The modern, simple and intuitive PHP 5.3+ unit testing framework.');

    if(true === in_array('--usage', $args)) {
        usage();

        return 0;
    }

    printfln('>> <yellow>Checking requirements...');
    if(false === checkRequirements($args)) {
        return 1;
    }

    if(true === in_array('--check', $args)) {
        return 0;
    }
    
    if(true === in_array('--phar', $args)) {
        printfln('>> <yellow>Installing PHAR from ' . ATOUM_PHAR_URL . '...');

        copy(ATOUM_PHAR_URL, getcwd() . DIRECTORY_SEPARATOR . ATOUM_PHAR_NAME);        

        if(true === in_array('--global', $args)) {
            checkAndCreateDirectory(ATOUM_PATH);

            $phar = ATOUM_PATH . DIRECTORY_SEPARATOR . ATOUM_PHAR_NAME;
            copy(getcwd() . DIRECTORY_SEPARATOR . ATOUM_PHAR_NAME, $phar);
            unlink(getcwd() . DIRECTORY_SEPARATOR . ATOUM_PHAR_NAME);

            $path = ATOUM_PATH . DIRECTORY_SEPARATOR . 'atoum';
            if(true === checkFileExists($path)) {
                unlink($path);
            }

            $bin = fopen($path, 'w+');
            fwrite($bin, <<<BIN
#!/bin/sh
php $phar $*

BIN
);
            fclose($bin);
            chmod($path, 0751);

            if(true === checkFileExists(ATOUM_SYMLINK)) {
                unlink(ATOUM_SYMLINK);
            }
            ppassthru('ln -s ' . $path . ' ' . ATOUM_SYMLINK);

            printfln('>> <green>atoum PHAR path : <yellow>' . $phar);
            printfln('>> <green>atoum bin path : <yellow>' . $path . ' -> ' . ATOUM_SYMLINK);
        } else {
            printfln('>> <green>atoum PHAR path : <yellow>' . getcwd() . DIRECTORY_SEPARATOR . ATOUM_PHAR_NAME);
            printfln('>> <green>usage : <yellow>php ' . ATOUM_PHAR_NAME);
        }
    } else {
        printfln('>> <yellow>Installing from sources...');

        if(true === in_array('--global', $args)) {
            if(false === checkDirectoryExists(ATOUM_PATH)) {
                printfln('>> <yellow>Cloning source repository...');
                ppassthru('git clone ' . ATOUM_GIT_URL . ' ' . ATOUM_PATH);

                $output = null;
                exec('git rev-parse HEAD', $output);
                printfln('>>> <yellow>Installed atoum master@%s', substr(implode('', $output), 0, 7));
            } else {
                printfln('>> <yellow>Updating sources...');
                ppassthru('cd ' . ATOUM_PATH . ' && git fetch origin && git reset --hard origin/master');

                $output = null;
                exec('git rev-parse HEAD', $output);
                printfln('>>> <yellow>Updated atoum to master@%s', substr(implode('', $output), 0, 7));
            }
    
            if(true === checkFileExists(ATOUM_SYMLINK)) {
                unlink(ATOUM_SYMLINK);
            }

            ppassthru('ln -s ' . ATOUM_PATH . DIRECTORY_SEPARATOR .'bin/atoum ' . ATOUM_SYMLINK);
            printfln('>> <green>atoum sources path : <yellow>' . ATOUM_PATH);
            printfln('>> <green>atoum bin path : <yellow>' . ATOUM_PATH . DIRECTORY_SEPARATOR .'bin/atoum -> ' . ATOUM_SYMLINK);     
        } else {
            if(false === checkDirectoryExists(getcwd() . DIRECTORY_SEPARATOR . 'atoum')) {
                ppassthru('git clone ' . ATOUM_GIT_URL);

                $output = null;
                exec('git rev-parse HEAD', $output);
                printfln('>>> <yellow>Installed atoum master@%s', substr(implode('', $output), 0, 7));
            } else {
                ppassthru('cd ' . getcwd() . DIRECTORY_SEPARATOR . 'atoum && git pull origin master');

                $output = null;
                exec('git rev-parse HEAD', $output);
                printfln('>>> <yellow>Updated atoum to master@%s', substr(implode('', $output), 0, 7));
            }

            printfln('>> <green>atoum sources path : <yellow>%s/atoum', getcwd());
            printfln('>> <green>atoum bin path : <yellow>%s/atoum/bin/atoum', getcwd());
        }
    }

    printfln('>> <green>atoum was successfully installed. Enjoy!');

    return 0;
}

function usage() {
    $format = '%-15s : %s';
    printfln($format, '--global', 'Install atoum as a global command');
    printfln($format, '--phar', 'Install atoum as a PHAR archive');
    printfln($format, '--source', 'Install atoum from sources <yellow>(default)');
    printfln($format, '--check', 'Only run system requirements check');

    printfln(PHP_EOL . 'Environment :');
    printfln($format, 'ATOUM_GIT_URL', 'Git repository <yellow>(default : git://github.com/mageekguy/atoum.git)');
    printfln($format, 'ATOUM_PATH', 'Installation directory <yellow>(default : /usr/share)');
    printfln($format, 'ATOUM_SYMLINK', 'atoum bin symlink path <yellow>(default: /usr/local/bin)');

    printfln(PHP_EOL . 'Examples :');
    printfln('$ curl ' . INSTALLER_URL .' | php -- --phar');
    printfln('$ curl ' . INSTALLER_URL .' | sudo php -- --global');
    printfln('$ curl ' . INSTALLER_URL .' | ATOUM_PATH=/home/me php');
}

function checkRequirements(array $args) {
    $error = false;

    if(50303 > PHP_VERSION_ID) {
        printfln('>>> <red>You should install PHP 5.3.3+/5.4. Actual version is %s', phpversion());
        $error = true;
    } else {
        printfln('>>> <green>Actual PHP version is %s', phpversion());
    }

    if(false === extension_loaded('phar')) {
        $color = in_array('--phar', $args) ? 'red' : 'yellow';
        printfln('>>> <%s>To use the PHAR archive you need to enable the PHAR extension', $color);
        if(true === in_array('--phar', $args)) {
            $error = true;
        }
    } else {
        printfln('>>> <green>PHAR extension is enabled');
    }

    if(false === extension_loaded('xml')) {
        printfln('>>> <yellow>To generate Xunit report you need to install XML extension');
    } else {
        printfln('>>> <green>XML extension is enabled');
    }

    if(false === extension_loaded('xdebug')) {
        printfln('>>> <yellow>To generate code coverage report you need to install XDebug');
    } else {
        printfln('>>> <green>XDebug extension is enabled');
        if(true === version_compare(phpversion('xdebug'), '2.2', '<')) {
            printfln('>>> <yellow>You should install XDebug 2.2.*');
            $error = true;        
        } else {
            printfln('>>> <green>XDebug version is %s', phpversion('xdebug'));
        }
    }

    if(false === checkPermissions($args)) {
        $error = true;
    } else {
        $paths = getPaths($args);
        $paths = implode(', ', array_keys(array_filter($paths, function($v) { return (true === $v);  })));
        printfln('>>> <green>You have required permissions on <yellow>%s', $paths);
    }
    
    return (false === $error);
}

function checkPermissions(array $args) {
    if(false != ($restrict = ini_get('open_basedir'))) {
        printfln('>>> <yellow>open_basedir restriction : %s', $restrict);
        printfln('>>>> To fix this issue, try to run : ');
        printfln('>>>> <yellow>ATOUM_PATH=/an/allowed/path ./installer <clear>or <yellow>curl ' . INSTALLER_URL . ' | ATOUM_PATH=/an/allowed/path php');
        printfln('>>>> or');
        printfln('>>>> <yellow>php -dopen_basedir= ./installer <clear>or <yellow>curl ' . INSTALLER_URL . ' | php -dopen_basedir=');
    }    
    
    $paths = getPaths($args);
        
    if(true === in_array(false, $paths)) {
       $paths = implode(', ', array_keys(array_filter($paths, function($v) { return (false === $v);  })));
       printfln('>>> <red>You don\'t have required permissions on <yellow>%s', $paths);

        return false;
    }

    return true;
}

function getPaths(array $args) {
    if(true === in_array('--global', $args)) {
        $paths = array(
            dirname(ATOUM_SYMLINK) => @is_writeable(dirname(ATOUM_SYMLINK)),
            dirname(ATOUM_PATH) => @is_writeable(dirname(ATOUM_PATH))
        );
    } else {
        $paths = array(
            getcwd() => @is_writeable(getcwd())
        );
    }

    return $paths;
}

function checkDirectoryExists($dir) {
    if(false === ($exists = is_dir($dir))) {
        printfln('>>> <yellow>Directory %s does not exist.', $dir);
    } else {
        printfln('>>> <yellow>Directory %s exists.', $dir);
    }

    return $exists;
}

function checkAndCreateDirectory($dir) {
    if(false === checkDirectoryExists($dir)) {
        printfln('>>> <yellow>Creating directory %s', $dir);
        mkdir($dir, true);
    }
}

function checkFileExists($file) {
    if(false === ($exists = is_file($file))) {
        printfln('>>> <yellow>File %s does not exist.', $file);
    } else {
        printfln('>>> <yellow>File %s exists.', $file);
    }

    return $exists;
}

function ppassthru($cmd) {
    printfln('>>> <yellow>' . $cmd);

    $status = 0;
    passthru($cmd, $status);

    return $status;
}

function printfln($line) {
    $args = array_slice(func_get_args(), 1);

    $line = call_user_func_array(
        'sprintf',
        array_merge(
            array($line),
            $args
        )
    );

    $support = '\\' === DIRECTORY_SEPARATOR ? false !== getenv('ANSICON') : (function_exists('posix_isatty') && posix_isatty(STDOUT));

    if(true === $support) {
        $line = preg_replace_callback(
            '/\<(red|green|yellow|blue|clear)\>/',
            function($matches) {
                $colors = array(
                    'red' => 31,
                    'green' => 32,
                    'yellow' => 33,
                    'blue' => 34
                );                
                $color = $matches[1];
                
                if('clear' === $color) {
                    return "\033[0m";
                } else {
                    return true === isset($colors[$matches[1]]) ? "\033[0;" . $colors[$matches[1]] . 'm' : '';
                }    
            },
            $line
        );

        $line .= "\033[0m";
    } else {
        $line = preg_replace(
            '/\<(red|green|yellow|blue|clear)\>/',
            '',
            $line
        );
    }

    $line .= PHP_EOL;
    
    print $line;
}
